// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using APIMarketplaceApp.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace APIMarketplaceApp.Data
{
    public partial class DB_MarketplaceContext
    {
        private DB_MarketplaceContextProcedures _procedures;

        public virtual DB_MarketplaceContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DB_MarketplaceContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public DB_MarketplaceContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<InsertMagasinResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<InsertPrixResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<InsertProduitResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ProduitSimilairesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SearchProduitResult>().HasNoKey().ToView(null);
        }
    }

    public interface IDB_MarketplaceContextProceduresContract
    {
        Task<int> InsertMagasinAsync(string id_magasin, string Nom_magasin, CancellationToken cancellationToken = default);
        Task<int> InsertPrixAsync(int? id_prix, string prix, DateTime? Date, string url, CancellationToken cancellationToken = default);
        Task<int> InsertProduitAsync(string Reference, string Description, string Stock, int? id_prix, string id_magasin, string id_sous_famille, string Photo, CancellationToken cancellationToken = default);
        Task<List<ProduitSimilairesResult>> ProduitSimilairesAsync(string reference, string categorie, CancellationToken cancellationToken = default);
        Task<List<SearchProduitResult>> SearchProduitAsync(string reference, CancellationToken cancellationToken = default);
    }

    public partial class DB_MarketplaceContextProcedures
    {
        private readonly DB_MarketplaceContext _context;

        public DB_MarketplaceContextProcedures(DB_MarketplaceContext context)
        {
            _context = context;
        }

        public virtual async Task<int> InsertMagasinAsync(string id_magasin, string Nom_magasin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id_magasin",
                    Size = 20,
                    Value = id_magasin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nom_magasin",
                    Size = -1,
                    Value = Nom_magasin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertMagasin] @id_magasin, @Nom_magasin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertPrixAsync(int? id_prix, string prix, DateTime? Date, string url, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id_prix",
                    Value = id_prix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prix",
                    Size = 255,
                    Value = prix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Date",
                    Value = Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "url",
                    Size = 2500,
                    Value = url ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertPrix] @id_prix, @prix, @Date, @url", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertProduitAsync(string Reference, string Description, string Stock, int? id_prix, string id_magasin, string id_sous_famille, string Photo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Reference",
                    Size = -1,
                    Value = Reference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = -1,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 255,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "id_prix",
                    Value = id_prix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id_magasin",
                    Size = 20,
                    Value = id_magasin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "id_sous_famille",
                    Size = 200,
                    Value = id_sous_famille ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "Photo",
                    Size = -1,
                    Value = Photo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertProduit] @Reference, @Description, @Stock, @id_prix, @id_magasin, @id_sous_famille, @Photo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ProduitSimilairesResult>> ProduitSimilairesAsync(string reference, string categorie, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "reference",
                    Size = -1,
                    Value = reference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "categorie",
                    Size = -1,
                    Value = categorie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ProduitSimilairesResult>("EXEC @returnValue = [dbo].[ProduitSimilaires] @reference, @categorie", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SearchProduitResult>> SearchProduitAsync(string reference, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "reference",
                    Size = -1,
                    Value = reference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SearchProduitResult>("EXEC @returnValue = [dbo].[SearchProduit] @reference", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
